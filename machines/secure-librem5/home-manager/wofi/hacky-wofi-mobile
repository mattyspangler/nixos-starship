#!/usr/bin/env bash
# shellcheck disable=SC2086
#
# hacky-wofi - A multi-purpose launcher for Wayland using wofi
#
# Dependencies: wofi wofi-emoji wl-clipboard notify-send jq numbat
#

# Set safer bash defaults
set -o errexit  # Exit on error
set -o nounset  # Error on unset variables
set -o pipefail # Fail pipe chains if any command fails

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Configuration
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/wofi-launcher"
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/wofi-launcher"
mkdir -p "$CACHE_DIR" "$CONFIG_DIR"

# Consistent wofi styling - 800x800, 50x50 from top-left
WOFI_ARGS="--width=800 --height=800 --xoffset=50 --yoffset=50 --location=top_left"

# Detect Wayland compositor
detect_compositor() {
    if [[ -n "$SWAYSOCK" ]]; then
        echo "sway"
    elif [[ -n "$WAYLAND_DISPLAY" ]]; then
        echo "wayland-generic"
    else
        echo "unknown"
    fi
}

COMPOSITOR=$(detect_compositor)

# Window switcher functions
# ------------------------------

# Get a list of all windows from Sway
# Format: "window_id [app_id/class] window_name"
get_windows_sway() {
    if ! command -v swaymsg &>/dev/null; then
        die "swaymsg is required for window switching"
    fi
    
    if ! command -v jq &>/dev/null; then
        die "jq is required for window switching"
    fi
    
    swaymsg -t get_tree | jq -r '
        .. | select(.type?) |
        select(.type == "con" or .type == "floating_con") |
        select(.name != null) |
        "\(.id) [\(.app_id // .window_properties.class // "unknown")] \(.name)"
    ' || die "Failed to get window list from sway"
}

# Focus a window in Sway by its ID
# $1: window_id - The ID of the window to focus
switch_window_sway() {
    local window_id="$1"
    if [[ -z "$window_id" ]]; then
        die "No window ID provided"
    fi
    swaymsg "[con_id=$window_id] focus" || die "Failed to focus window $window_id"
}

# Main menu modes
mode_apps() {
    # Use wofi's built-in drun mode with our positioning
    wofi --show drun --allow-images $WOFI_ARGS --prompt "Apps"
}

mode_windows() {
    local windows
    case "$COMPOSITOR" in
        sway) windows=$(get_windows_sway) ;;
        *)
            notify-send "Error" "Window switching only supported on Sway"
            exit 1
            ;;
    esac

    if [[ -z "$windows" ]]; then
        notify-send "No windows" "No windows found"
        exit 0
    fi

    local selected
    selected=$(echo "$windows" | wofi --dmenu -i -p "Windows" $WOFI_ARGS --matching fuzzy)

    if [[ -n "$selected" ]]; then
        local window_id
        window_id=$(echo "$selected" | awk '{print $1}')

        case "$COMPOSITOR" in
            sway) switch_window_sway "$window_id" ;;
        esac
    fi
}

mode_power() {
    local options="🔒 Lock
🚪 Logout
💤 Suspend
🌙 Suspend + Lock
🔄 Reboot
⏻ Shutdown"

    local selected
    selected=$(echo "$options" | wofi --dmenu -p "Power" $WOFI_ARGS)

    case "$selected" in
        "🔒 Lock")
            # If using swayidle, just trigger the lock
            if pgrep swayidle >/dev/null; then
                pkill -USR1 swayidle
            elif command -v swaylock >/dev/null 2>&1; then
                swaylock
            elif command -v waylock >/dev/null 2>&1; then
                waylock
            elif command -v gtklock >/dev/null 2>&1; then
                gtklock
            else
                notify-send "Error" "No Wayland lock screen found"
            fi
            ;;
        "🚪 Logout")
            case "$COMPOSITOR" in
                sway) swaymsg exit ;;
                *) loginctl terminate-session "$XDG_SESSION_ID" ;;
            esac
            ;;
        "💤 Suspend")
            systemctl suspend
            ;;
        "🌙 Suspend + Lock")
            # Lock then suspend (swayidle should handle the unlock)
            if command -v swaylock >/dev/null 2>&1; then
                swaylock -f &
                sleep 1
                systemctl suspend
            else
                systemctl suspend
            fi
            ;;
        "🔄 Reboot")
            systemctl reboot
            ;;
        "⏻ Shutdown")
            systemctl poweroff
            ;;
    esac
}

# Calculator function using Numbat (unit-aware scientific calculator)
mode_calc() {
    # Ask for expression
    local expression
    local prompt="Calculator (Numbat) - Try: 5 m + 10 cm, 100 km/h in mph, etc."
    expression=$(wofi --dmenu -p "$prompt" $WOFI_ARGS -l 0)
    
    # Exit if empty
    if [[ -z "$expression" ]]; then
        return
    fi
    
    # Check if Numbat is available
    if ! command -v numbat &>/dev/null; then
        notify-send -u normal "Calculator Info" "Numbat calculator is not installed.\nPlease install Numbat for scientific calculation functionality."
        return
    fi

    # Use Numbat to evaluate the expression
    local result
    local plain_result
    
    # Run Numbat with the expression flag
    result=$(numbat -e "$expression" --color always 2>&1)
    exit_code=$?
    
    # Get plain text version for clipboard (without ANSI color codes)
    plain_result=$(numbat -e "$expression" --color never 2>&1)
    
    # Check result
    if [[ $exit_code -eq 0 && -n "$result" ]]; then
        # Show the result first
        notify-send -u normal "Calculator Result" "Expression: $expression\n\nResult: $plain_result"
        
        # Create follow-up menu for actions
        local action_menu="📋 Copy to clipboard
📄 Save to file
❌ Dismiss"
        
        local selected_action
        selected_action=$(echo "$action_menu" | wofi --dmenu -p "Result: $plain_result" $WOFI_ARGS)
        
        case "$selected_action" in
            "📋 Copy to clipboard")
                # Copy to clipboard
                echo -n "$plain_result" | wl-copy
                notify-send "Calculator" "Result copied to clipboard"
                ;;
                
            "📄 Save to file")
                # Ask for filename
                local filename
                filename=$(wofi --dmenu -p "Enter filename to save result" $WOFI_ARGS -l 0)
                
                # If filename is provided, save to file
                if [[ -n "$filename" ]]; then
                    # Expand ~ to $HOME if present
                    filename="${filename/#\~/$HOME}"
                    
                    # Create directory if it doesn't exist
                    local dirname
                    dirname=$(dirname "$filename")
                    mkdir -p "$dirname" 2>/dev/null
                    
                    # Save the result to the file
                    if echo -e "# Numbat Calculation: $expression\n$plain_result" > "$filename" 2>/dev/null; then
                        notify-send "Calculator" "Result saved to $filename"
                    else
                        notify-send -u critical "Error" "Could not save to $filename"
                    fi
                fi
                ;;
                
            *)
                # Dismiss - do nothing
                ;;
        esac
    else
        # Error handling with more detailed message
        notify-send -u critical "Calculator Error" "Could not calculate: $expression\n\nError: $result\n\nTry using proper Numbat syntax with units, e.g.:\n- 5 m + 10 cm\n- 100 km/h in mph\n- 20 °C in °F"
    fi
}

mode_emoji() {
    # Use the installed wofi-emoji program
    if command -v wofi-emoji >/dev/null 2>&1; then
        wofi-emoji
    else
        notify-send "Error" "wofi-emoji not found. Please install it."
    fi
}

mode_run() {
    # Use original wofi run dialog to get a list of commands
    local command
    command=$(wofi --show run $WOFI_ARGS --prompt "Run in Terminal")
    
    # If no command was selected, exit
    if [[ -z "$command" ]]; then
        return
    fi
    
    # Escape single quotes in command for shell safety
    local escaped_command="${command//\'/\'\\\'\'}"
    
    # Create a temporary script for execution
    local tmp_script
    tmp_script=$(mktemp -p /tmp wofi-run-XXXXXX.sh)
    
    # Make the script executable and write the command to it
    chmod +x "$tmp_script"
    cat > "$tmp_script" << EOF
#!/usr/bin/env bash
echo "Executing: $command"
echo "-----------------------------------"
$command
exit_code=\$?
echo "-----------------------------------"
echo "Command exited with code: \$exit_code"
echo "Press ENTER to close this window"
read
EOF
    
    # Find available terminal
    local terminal=""
    for term in "foot" "alacritty" "kitty" "wezterm" "gnome-terminal" "konsole"; do
        if command -v "$term" &>/dev/null; then
            terminal="$term"
            break
        fi
    done
    
    # Launch command in terminal using script - with explicit "new window" flags
    if [[ -n "$terminal" ]]; then
        # Use nohup to ensure it keeps running after this script exits
        case "$terminal" in
            alacritty)
                # Force a new window with unique class name
                nohup alacritty --class "wofi-run-$(date +%s)" -e "$tmp_script" >/dev/null 2>&1 &
                disown
                ;;
            foot)
                # Force a new server/window
                nohup foot --server-socket-name "wofi-run-$(date +%s)" -e "$tmp_script" >/dev/null 2>&1 &
                disown
                ;;
            kitty)
                # Force a new kitty window
                nohup kitty --single-instance --instance-group "wofi-run-$(date +%s)" --hold -e "$tmp_script" >/dev/null 2>&1 &
                disown
                ;;
            wezterm)
                nohup wezterm start --always-new-process --hold -- "$tmp_script" >/dev/null 2>&1 &
                disown
                ;;
            gnome-terminal)
                nohup gnome-terminal --window --wait -- "$tmp_script" >/dev/null 2>&1 &
                disown
                ;;
            konsole)
                nohup konsole --new-tab -e "$tmp_script" >/dev/null 2>&1 &
                disown
                ;;
        esac
    else
        # Fall back to running directly if no terminal is available
        notify-send "Warning" "No terminal emulator found, running command directly"
        $command &
    fi
}

# Check for required dependencies
check_dependencies() {
    local missing=()
    local required=("wofi" "wl-copy" "wl-paste" "notify-send" "jq")
    
    for cmd in "${required[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done
    
    if (( ${#missing[@]} > 0 )); then
        echo "Error: Missing required dependencies: ${missing[*]}" >&2
        notify-send -u critical "Error" "Missing required dependencies: ${missing[*]}"
        exit 1
    fi
}

# Display error message and exit
die() {
    local message="$1"
    echo "Error: $message" >&2
    notify-send -u critical "Error" "$message"
    exit 1
}

# Main launcher
main() {
    # Check if running on Wayland
    if [[ -z "$WAYLAND_DISPLAY" ]]; then
        die "This launcher requires Wayland"
    fi
    
    # Check for dependencies
    check_dependencies

    # Parse arguments for direct mode access
    case "${1:-}" in
        apps|drun) mode_apps; exit 0 ;;
        windows) mode_windows; exit 0 ;;
        power) mode_power; exit 0 ;;
        calc) mode_calc; exit 0 ;;
        emoji) mode_emoji; exit 0 ;;
        run) mode_run; exit 0 ;;
    esac

    # Main menu
    local menu="🚀 Apps
🪟 Windows
🤖 AI Assistant
▶️  Run Command
🔋 Power
🧮 Calculator
😀 Emoji
⚙️ Settings"

    local selected
    selected=$(echo "$menu" | wofi --dmenu -p "Launcher" $WOFI_ARGS)

    case "$selected" in
        "🚀 Apps") mode_apps ;;
        "🪟 Windows") mode_windows ;;
        "▶️  Run Command") mode_run ;;
        "🔋 Power") mode_power ;;
        "🧮 Calculator") mode_calc ;;
        "😀 Emoji") mode_emoji ;;
        "⚙️ Settings")
            notify-send "Settings" "Edit configs in:\n$CONFIG_DIR\n\nScripts location:\n$SCRIPT_DIR"
            ;;
    esac
}

main "$@"
